/*COPY (SELECT 'peer_' || i AS Nickname,
  DATE('1984-01-01'::date + interval '1 YEAR' * ROUND(RANDOM() * 20) + 
  interval '1 MONTH' * (i - 1) +  
  interval '1 DAY' * ROUND(RANDOM() * 30)) AS Birthday
  FROM generate_series(1, 12)g(i)) 
TO '/Users/kareemto/SQL2_Info21_v1.0-1/src/test.csv' DELIMITER ',';
*/
/*
CREATE OR REPLACE FUNCTION tt() RETURNS Table(p varchar, d date, t_out time without time zone, s integer) AS $$
    DECLARE
      p varchar(20);
      d date;
      t_out time(0) without time zone;
      count integer;
      i interval;
      step integer;
    BEGIN
      d := '2023-08-01';
      WHILE d <= '2023-09-30' LOOP
        FOR p IN (SELECT Nickname FROM Peers) LOOP
          count := random() * 3;
          IF count <> 0 THEN 
            t_out := '08:00:00' + interval '1 MIN' * random() * 420;
            i := extract(hour from '21:59:59' - t_out) / count * 3600;
          END IF;
          FOR step IN 1 ..count * 2 LOOP
            IF step % 2 = 0 THEN
              t_out := t_out + i + interval '1 MIN' * random() * 10;
            ELSIF step % 2 = 1 AND step <> 1 THEN 
              t_out := t_out + interval '1 MIN' * (5 + random() * 30);
            END IF;
            RETURN QUERY 
              SELECT p, d, t_out AS t, CASE WHEN step % 2 = 1 THEN 1 ELSE 2 END AS s;
          END LOOP;
        END LOOP;
      d = d + interval '1 DAY';
      END LOOP;
      RETURN;
    END;
$$ LANGUAGE PLPGSQL;

COPY (SELECT ROW_NUMBER() OVER(), * FROM (SELECT p, d, t_out, s FROM tt() ORDER BY d, t_out, s)tmp
)TO '/Users/kareemto/SQL2_Info21_v1.0-1/src/test_tt.csv' DELIMITER ',';

DROP FUNCTION tt();
*/
/*
CREATE OR REPLACE FUNCTION rec() RETURNS Table(p varchar, p2 varchar) AS $$
    DECLARE
      i integer;
      c integer;
      p varchar(20);
      p2 varchar(20);
    BEGIN
      FOR p IN (SELECT Nickname FROM Peers) LOOP
        i := 0;
        WHILE i <= 12 LOOP
          c := random() * 6;
          i := i + c;
          EXIT WHEN i > 12;
          CONTINUE WHEN p = 'peer_' || i OR c = 0;
          p2 := 'peer_' || i;
          RETURN QUERY 
            SELECT p, p2;
        END LOOP;
      END LOOP;
      RETURN;
    END;
$$ LANGUAGE PLPGSQL;

COPY (SELECT ID, p, p2 FROM (SELECT ROW_NUMBER() OVER() AS ID, *
  FROM (SELECT p, length(p) AS l1, p2, length(p2) AS l2 
  FROM rec())tmp ORDER BY p, l1, p2, l2)tmp2 ORDER BY ID) 
TO '/Users/kareemto/SQL2_Info21_v1.0-1/src/test_rec.csv' DELIMITER ',';

DROP FUNCTION rec();
*/
/*
CREATE OR REPLACE FUNCTION fr() RETURNS TABLE(p1 varchar, p2 varchar) AS $$
  DECLARE
    c integer;
    x integer;
    tm varchar(20);
    p1 varchar(20);
    p2 varchar(20);
  BEGIN
    FOR p1 IN (SELECT Nickname FROM Peers) LOOP
      c := random() * 3;
      WHILE c > 0 LOOP
        x := random() * 12;
        CONTINUE WHEN p1 = 'peer_' || x OR x = 0;
        p2 := 'peer_' || x;
        c := c - 1;
        RAISE NOTICE '%-%', p1, p2;
        IF (p1 < p2 AND length(p1) <= length(p2)) OR length(p1) < length(p2) THEN 
          RETURN QUERY
            SELECT p1, p2;
        ELSE
          RETURN QUERY 
            SELECT p2, p1;
        END IF;
      END LOOP;
    END LOOP;
  END;
$$ LANGUAGE PLPGSQL;

COPY (SELECT ROW_NUMBER() OVER() AS ID, p1, p2 FROM (SELECT *
  FROM (SELECT p1, length(p1) AS l1, p2, length(p2) AS l2
  FROM fr() GROUP BY 1, 2, 3, 4 ORDER BY 2, 1, 4, 3)tmp ORDER BY  2, 1, 4, 3)tmp2 ORDER BY ID)
TO '/Users/kareemto/SQL2_Info21_v1.0-1/src/test_fr.csv' DELIMITER ',';

--DROP FUNCTION fr();
*/
/*
DROP TABLE IF EXISTS for_ch;

CREATE TABLE for_ch (
  id bigint PRIMARY KEY,
  p varchar(50),
  t varchar(50),
  d date,
  st integer,
  v integer
);

CREATE OR REPLACE FUNCTION ch() RETURNS TABLE (p varchar, t varchar, d date, st integer, v integer) AS $$
  DECLARE
    i integer;
    p varchar;
    t varchar;
    d date;
    tmp_d date;
    c integer := 0;
    x integer;
    st integer;
    v integer := 0;
    peer_task integer[][];
    ptr integer[] := '{1,1,1,1,1,1,1,1,1,1,1,1}';
  BEGIN
    peer_task = '{{1, 2, 3, 4, 5, 6, 18, 19, 7, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
                  {1, 2, 3, 4, 18, 19, 20, 21, 22, 5, 23, 0, 0, 0, 0, 0, 0, 0, 0},
                  {1, 2, 3, 4, 5, 18, 19, 20, 21, 22, 6, 7, 25, 8, 9, 10, 0, 0, 0},
                  {1, 3, 2, 4, 5, 6, 7, 18, 19, 20, 22, 8, 25, 9, 10, 11, 12, 26, 28},
                  {1, 3, 2, 4, 5, 6, 18, 19, 20, 22, 7, 25, 26, 27, 0, 0, 0, 0, 0},
                  {1, 2, 3, 4, 5, 18, 19, 20, 21, 22, 23, 0, 0, 0, 0, 0, 0, 0, 0},
                  {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 25, 0, 0, 0, 0, 0, 0, 0, 0},
                  {1, 3, 2, 4, 5, 6, 7, 18, 19, 8, 25, 26, 9, 0, 0, 0, 0, 0, 0},
                  {1, 2, 3, 4, 5, 6, 7, 18, 19, 20, 8, 9, 0, 0, 0, 0, 0, 0, 0},
                  {1, 3, 2, 4, 5, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                  {1, 2, 3, 4, 5, 6, 7, 25, 26, 27, 8, 9, 10, 0, 0, 0, 0, 0, 0},
                  {1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}';
      tmp_d = '2023-08-02';

      WHILE tmp_d < '2023-09-30' LOOP
        FOR x IN 1..12 LOOP
          v := 0;
          st := random() * 6;
          CONTINUE WHEN peer_task[x][ptr[x]] = 0 OR ptr[x] > 19;
          SELECT Title FROM Tasks OFFSET peer_task[x][ptr[x]] - 1 LIMIT 1 INTO t;
          SELECT Nickname FROM Peers OFFSET x - 1 LIMIT 1 INTO p;
          IF peer_task[x][ptr[x]] <= 5 THEN 
            v := 1;
          END IF;
          IF st <> 0 THEN
            ptr[x] := ptr[x] + 1;
          END IF;
          RETURN QUERY 
            SELECT p, t, tmp_d, st, v;
        END LOOP;
        tmp_d := tmp_d + interval '1 DAY' * (random() * 5 + random() * 3);
      END LOOP;
  END;
$$ LANGUAGE PLPGSQL;

INSERT INTO for_ch 
  SELECT ROW_NUMBER() OVER(), * FROM (SELECT p, t, d, st, v FROM ch() ORDER BY d)tmp;

COPY (SELECT id, p, t, d FROM for_ch) TO '/Users/kareemto/SQL2_Info21_v1.0-1/src/test_checks.csv' DELIMITER ',';

DROP FUNCTION IF EXISTS ch();
*/
/*
TRUNCATE P2P;
TRUNCATE Verter;
TRUNCATE TransferredPoints;

CREATE OR REPLACE FUNCTION for_p2p() RETURNS void AS $$
  DECLARE
    p varchar;
    t time (0);
    tmp_t time(0);
    tmp_date date := '2023-08-01';
    r record;
    x integer;
    y integer;
  BEGIN
    FOR r IN (SELECT * FROM for_ch) LOOP
      x := random() * 10;
      y := random() * 6 + 1;
      IF tmp_date < r.d THEN  
        tmp_date := r.d;
        t := '08:00:00';
      END IF;
      
      SELECT Nickname FROM Peers WHERE Nickname <> r.p OFFSET x INTO p;
      t := t + interval '15 MIN' * y; 
      tmp_t := t + interval '1 SEC' * (random() * 2700 + 1800);
      INSERT INTO P2P VALUES ((SELECT COALESCE(MAX(id) + 1, 1) FROM P2P), r.id, p, 'Start', t);

      IF r.v > 0 THEN
        INSERT INTO P2P VALUES ((SELECT COALESCE(MAX(id) + 1, 1) FROM P2P), r.id, p, 'Success', tmp_t);
        tmp_t := tmp_t + interval '1 SEC' * (random() * 60 + 15);
        INSERT INTO Verter VALUES ((SELECT COALESCE(MAX(id) + 1, 1) FROM Verter), r.id, 'Start', tmp_t);
        tmp_t := tmp_t + interval '1 SEC' * (random() * 600 + 60);
        IF r.st > 0 THEN
          INSERT INTO Verter VALUES ((SELECT COALESCE(MAX(id) + 1, 1) FROM Verter), r.id, 'Success', tmp_t);
        ELSE 
          INSERT INTO Verter VALUES ((SELECT COALESCE(MAX(id) + 1, 1) FROM Verter), r.id, 'Failure', tmp_t);
        END IF;
      ELSE 
        IF r.st > 0 THEN 
          INSERT INTO P2P VALUES ((SELECT COALESCE(MAX(id) + 1, 1) FROM P2P), r.id, p, 'Success', tmp_t);
        ELSE 
          INSERT INTO P2P VALUES ((SELECT COALESCE(MAX(id) + 1, 1) FROM P2P), r.id, p, 'Failure', tmp_t);
        END IF;
      END IF;
    END LOOP;
  END;
$$ LANGUAGE PLPGSQL;

SELECT * FROM for_p2p();

DROP FUNCTION IF EXISTS for_p2p;
*/
/*
TRUNCATE XP;
CREATE OR REPLACE FUNCTION c_xp() RETURNS void AS $$
  DECLARE
    r record;
  BEGIN
    FOR r IN (SELECT * FROM Checks) LOOP
      IF EXISTS (SELECT 1 FROM P2P p WHERE p."Check" = r.id AND p.State = 'Success') AND (SELECT COUNT(State)
        FROM Verter v WHERE v."Check" = r.id AND (v.State = 'Start' OR v.State = 'Success')) <> 1 THEN
        INSERT INTO XP VALUES ((SELECT COALESCE(MAX(ID) + 1, 1) FROM XP), r.id,
            (SELECT COALESCE(MaxXP, 100) FROM Tasks t WHERE r.Task=t.Title) * ((random() * 20 + 80) / 100));
      END IF;
    END LOOP;
  END;
$$ LANGUAGE PLPGSQL;

SELECT c_xp();

DROP FUNCTION c_xp();
*/
